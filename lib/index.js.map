{"version":3,"sources":["../src/index.js"],"names":["module","exports","serverless","options","servicePath","config","logger","cli","service","provider","getProvider","tmpDir","path","join","artifactTmpDir","custom","getS3Instance","getElasticBeanstalkInstance","hooks","BbPromise","bind","then","init","remove","request","StackName","getServiceName","getStage","getRegion","res","stack","Stacks","pop","Outputs","output","reduce","obj","item","Object","assign","OutputKey","OutputValue","fs","existsSync","mkdirSync","version","Math","floor","Date","valueOf","toString","forEach","applicationName","environmentName","versionLabel","fileName","process","cwd","rootDir","bundlePath","resolve","S3","region","upload","Body","createReadStream","Bucket","ServerlessDeploymentBucketName","Key","promise","EB","createApplicationVersion","ApplicationName","Process","SourceBundle","S3Bucket","S3Key","VersionLabel","log","updated","describeApplicationVersions","VersionLabels","response","JSON","stringify","ApplicationVersions","Status","Error","delay","updateEnvironment","EnvironmentName","describeEnvironments","EnvironmentNames","Environments"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAKA;;AAEAA,MAAM,CAACC,OAAP;AACE,kBAAYC,UAAZ,EAAwBC,OAAxB,EAAiC;AAAA;;AAAA;AAC/B,SAAKD,UAAL,GAAkBA,UAAlB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,WAAL,GAAmB,KAAKF,UAAL,CAAgBG,MAAhB,CAAuBD,WAA1C;AACA,SAAKE,MAAL,GAAc,KAAKJ,UAAL,CAAgBK,GAA9B;AACA,SAAKC,OAAL,GAAe,KAAKN,UAAL,CAAgBM,OAA/B;AACA,SAAKC,QAAL,GAAgB,KAAKP,UAAL,CAAgBQ,WAAhB,CAA4B,KAA5B,CAAhB;AAEA,SAAKC,MAAL,GAAcC,iBAAKC,IAAL,CAAU,KAAKT,WAAf,EAA4B,cAA5B,CAAd;AACA,SAAKU,cAAL,GAAsBF,iBAAKC,IAAL,CAAU,KAAKF,MAAf,EAAuB,aAAvB,CAAtB;;AAEA,QAAI,KAAKH,OAAL,CAAaO,MAAjB,EAAyB;AACvB,WAAKV,MAAL,GAAc,KAAKG,OAAL,CAAaO,MAAb,CAAoB,mBAApB,CAAd;AACD;;AAED,SAAKC,aAAL,GAAqBA,kBAArB;AACA,SAAKC,2BAAL,GAAmCA,gCAAnC;AAEA,SAAKC,KAAL,GAAa;AACX,6BAAuB;AAAA,eAAMC,qBAAUC,IAAV,CAAe,KAAf,EAAqBC,IAArB,CAA0B;AAAA,iBAAM,KAAI,CAACC,IAAL,EAAN;AAAA,SAA1B,CAAN;AAAA,OADZ;AAEX,8BAAwB;AAAA,eACtBH,qBAAUC,IAAV,CAAe,KAAf,EAAqBC,IAArB,CAA0B;AAAA,iBAAM,KAAI,CAACE,MAAL,EAAN;AAAA,SAA1B,CADsB;AAAA;AAFb,KAAb;AAKD;;AAxBH;AAAA;AAAA;AAAA,gGA0BE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACoB,KAAKd,QAAL,CAAce,OAAd,CAChB,gBADgB,EAEhB,gBAFgB,EAGhB;AACEC,kBAAAA,SAAS,YAAK,KAAKjB,OAAL,CAAakB,cAAb,EAAL,cAAsC,KAAKjB,QAAL,CAAckB,QAAd,EAAtC;AADX,iBAHgB,EAMhB,KAAKlB,QAAL,CAAckB,QAAd,EANgB,EAOhB,KAAKlB,QAAL,CAAcmB,SAAd,EAPgB,CADpB;;AAAA;AACQC,gBAAAA,GADR;AAWQC,gBAAAA,KAXR,GAWgBD,GAAG,CAACE,MAAJ,CAAWC,GAAX,MAAoB;AAAEC,kBAAAA,OAAO,EAAE;AAAX,iBAXpC;AAYQC,gBAAAA,MAZR,GAYiBJ,KAAK,CAACG,OAAN,IAAiB,EAZlC;AAcQ5B,gBAAAA,MAdR,GAciB6B,MAAM,CAACC,MAAP,CACb,UAACC,GAAD,EAAMC,IAAN;AAAA,yBAAeC,MAAM,CAACC,MAAP,CAAcH,GAAd,uCAAsBC,IAAI,CAACG,SAA3B,EAAuCH,IAAI,CAACI,WAA5C,EAAf;AAAA,iBADa,EAEb,EAFa,CAdjB;;AAmBE,oBAAI,CAACC,eAAGC,UAAH,CAAc,KAAK7B,cAAnB,CAAL,EAAyC;AACvC4B,iCAAGE,SAAH,CAAa,KAAK9B,cAAlB;AACD;;AAEK+B,gBAAAA,OAvBR,GAuBkBC,IAAI,CAACC,KAAL,CAAW,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAlC,EAAwCC,QAAxC,EAvBlB;AAyBE,qBAAK7C,MAAL,CAAY8C,OAAZ;AAAA,2GAAoB,iBAAOd,IAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACZe,4BAAAA,eADY,GACM/C,MAAM,CAACgC,IAAI,CAACe,eAAN,CADZ;AAEZC,4BAAAA,eAFY,GAEMhD,MAAM,CAACgC,IAAI,CAACgB,eAAN,CAFZ;AAGZC,4BAAAA,YAHY,aAGMF,eAHN,cAGyBP,OAHzB;AAIZU,4BAAAA,QAJY,oBAISD,YAJT;AAAA;AAAA,mCAMZ,yBACJ1C,iBAAKC,IAAL,CAAU2C,OAAO,CAACC,GAAR,EAAV,EAAyBpB,IAAI,CAACqB,OAA9B,CADI,YAED,MAAI,CAAC5C,cAFJ,cAEsByC,QAFtB,EANY;;AAAA;AAWZI,4BAAAA,UAXY,GAWC/C,iBAAKgD,OAAL,CAAa,MAAI,CAAC9C,cAAlB,EAAkCyC,QAAlC,CAXD;AAaZM,4BAAAA,EAbY,GAaP,wBAAc,MAAI,CAAC3D,UAAnB,EAA+B,MAAI,CAACC,OAAL,CAAa2D,MAA5C,CAbO;AAAA;AAAA,mCAeZD,EAAE,CAACE,MAAH,CAAU;AACdC,8BAAAA,IAAI,EAAEtB,eAAGuB,gBAAH,CAAoBN,UAApB,CADQ;AAEdO,8BAAAA,MAAM,EAAE7D,MAAM,CAAC8D,8BAFD;AAGdC,8BAAAA,GAAG,EAAE,QAAQb;AAHC,6BAAV,EAIHc,OAJG,EAfY;;AAAA;AAqBZC,4BAAAA,EArBY,GAqBP,sCACT,MAAI,CAACpE,UADI,EAET,MAAI,CAACC,OAAL,CAAa2D,MAFJ,CArBO;AAAA;AAAA,mCA0BZQ,EAAE,CAACC,wBAAH,CAA4B;AAChCC,8BAAAA,eAAe,EAAEpB,eADe;AAEhCqB,8BAAAA,OAAO,EAAE,IAFuB;AAGhCC,8BAAAA,YAAY,EAAE;AACZC,gCAAAA,QAAQ,EAAEtE,MAAM,CAAC8D,8BADL;AAEZS,gCAAAA,KAAK,EAAE,QAAQrB;AAFH,+BAHkB;AAOhCsB,8BAAAA,YAAY,EAAEvB;AAPkB,6BAA5B,EAQHe,OARG,EA1BY;;AAAA;AAmChB,4BAAA,MAAI,CAAC/D,MAAL,CAAYwE,GAAZ,CAAgB,oCAAhB,CAnCgB;;AAqCdC,4BAAAA,OArCc,GAqCJ,KArCI;;AAAA;AAAA,gCAuCVA,OAvCU;AAAA;AAAA;AAAA;;AAAA;AAAA,mCAwCOT,EAAE,CAACU,2BAAH,CAA+B;AACpDC,8BAAAA,aAAa,EAAE,CAAC3B,YAAD;AADqC,6BAA/B,EAEpBe,OAFoB,EAxCP;;AAAA;AAwCVa,4BAAAA,QAxCU;;AA4ChB,4BAAA,MAAI,CAAC5E,MAAL,CAAYwE,GAAZ,CAAgBK,IAAI,CAACC,SAAL,CAAeF,QAAf,CAAhB;;AA5CgB,kCA8CZA,QAAQ,CAACG,mBAAT,CAA6B,CAA7B,EAAgCC,MAAhC,KAA2C,WA9C/B;AAAA;AAAA;AAAA;;AA+CdP,4BAAAA,OAAO,GAAG,IAAV;AA/Cc;AAAA;;AAAA;AAAA,kCAgDLG,QAAQ,CAACG,mBAAT,CAA6B,CAA7B,EAAgCC,MAAhC,KAA2C,QAhDtC;AAAA;AAAA;AAAA;;AAAA,kCAiDR,IAAIC,KAAJ,CAAU,qCAAV,CAjDQ;;AAAA;AAAA;AAAA,mCAmDRpE,qBAAUqE,KAAV,CAAgB,IAAhB,CAnDQ;;AAAA;AAAA;AAAA;;AAAA;AAuDlB,4BAAA,MAAI,CAAClF,MAAL,CAAYwE,GAAZ,CAAgB,8CAAhB;;AACA,4BAAA,MAAI,CAACxE,MAAL,CAAYwE,GAAZ,CAAgB,qCAAhB;;AAxDkB,0CA0DlB,MAAI,CAACxE,MA1Da;AAAA,0CA2DhB6E,IA3DgB;AAAA;AAAA,mCA4DRb,EAAE,CAACmB,iBAAH,CAAqB;AACzBjB,8BAAAA,eAAe,EAAEpB,eADQ;AAEzBsC,8BAAAA,eAAe,EAAErC,eAFQ;AAGzBwB,8BAAAA,YAAY,EAAEvB;AAHW,6BAArB,EAIHe,OAJG,EA5DQ;;AAAA;AAAA;AAAA,sDA2DXe,SA3DW;;AAAA,wCA0DNN,GA1DM;;AAoElB,4BAAA,MAAI,CAACxE,MAAL,CAAYwE,GAAZ,CAAgB,4BAAhB;;AAEAC,4BAAAA,OAAO,GAAG,KAAV;;AAtEkB;AAAA,gCAwEVA,OAxEU;AAAA;AAAA;AAAA;;AAAA;AAAA,mCAyEOT,EAAE,CAACqB,oBAAH,CAAwB;AAC7CC,8BAAAA,gBAAgB,EAAE,CAACvC,eAAD;AAD2B,6BAAxB,EAEpBgB,OAFoB,EAzEP;;AAAA;AAyEVa,4BAAAA,SAzEU;;AA6EhB,4BAAA,MAAI,CAAC5E,MAAL,CAAYwE,GAAZ,CAAgBK,IAAI,CAACC,SAAL,CAAeF,SAAf,CAAhB;;AA7EgB,kCA+EZA,SAAQ,CAACW,YAAT,CAAsB,CAAtB,EAAyBP,MAAzB,KAAoC,OA/ExB;AAAA;AAAA;AAAA;;AAgFdP,4BAAAA,OAAO,GAAG,IAAV;AAhFc;AAAA;;AAAA;AAAA;AAAA,mCAkFR5D,qBAAUqE,KAAV,CAAgB,IAAhB,CAlFQ;;AAAA;AAAA;AAAA;;AAAA;AAsFlB,4BAAA,MAAI,CAAClF,MAAL,CAAYwE,GAAZ,CAAgB,8CAAhB;;AACA,4BAAA,MAAI,CAACxE,MAAL,CAAYwE,GAAZ,CAAgB,mCAAhB;;AAvFkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAApB;;AAAA;AAAA;AAAA;AAAA;;AAzBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA1BF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kGA8IE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACoB,KAAKrE,QAAL,CAAce,OAAd,CAChB,gBADgB,EAEhB,gBAFgB,EAGhB;AACEC,kBAAAA,SAAS,YAAK,KAAKjB,OAAL,CAAakB,cAAb,EAAL,cAAsC,KAAKjB,QAAL,CAAckB,QAAd,EAAtC;AADX,iBAHgB,EAMhB,KAAKlB,QAAL,CAAckB,QAAd,EANgB,EAOhB,KAAKlB,QAAL,CAAcmB,SAAd,EAPgB,CADpB;;AAAA;AACQC,gBAAAA,GADR;AAWQC,gBAAAA,KAXR,GAWgBD,GAAG,CAACE,MAAJ,CAAWC,GAAX,MAAoB;AAAEC,kBAAAA,OAAO,EAAE;AAAX,iBAXpC;AAYQC,gBAAAA,MAZR,GAYiBJ,KAAK,CAACG,OAAN,IAAiB,EAZlC;AAcQ5B,gBAAAA,MAdR,GAciB6B,MAAM,CAACC,MAAP,CACb,UAACC,GAAD,EAAMC,IAAN;AAAA,yBAAeC,MAAM,CAACC,MAAP,CAAcH,GAAd,uCAAsBC,IAAI,CAACG,SAA3B,EAAuCH,IAAI,CAACI,WAA5C,EAAf;AAAA,iBADa,EAEb,EAFa,CAdjB;AAmBQoB,gBAAAA,EAnBR,GAmBa,wBAAc,KAAK3D,UAAnB,EAA+B,KAAKC,OAAL,CAAa2D,MAA5C,CAnBb;AAqBE,2CAAiBD,EAAjB,EAAqBxD,MAAM,CAAC8D,8BAA5B,EAA4D,KAA5D;;AArBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA9IF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import BbPromise from \"bluebird\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport {\n  getS3Instance,\n  emptyS3Directory,\n  getElasticBeanstalkInstance,\n} from \"./aws\";\nimport { zipDirectory } from \"./files\";\n\nmodule.exports = class Plugin {\n  constructor(serverless, options) {\n    this.serverless = serverless;\n    this.options = options;\n    this.servicePath = this.serverless.config.servicePath;\n    this.logger = this.serverless.cli;\n    this.service = this.serverless.service;\n    this.provider = this.serverless.getProvider(\"aws\");\n\n    this.tmpDir = path.join(this.servicePath, \"/.serverless\");\n    this.artifactTmpDir = path.join(this.tmpDir, \"./artifacts\");\n\n    if (this.service.custom) {\n      this.config = this.service.custom[\"elastic-beanstalk\"];\n    }\n\n    this.getS3Instance = getS3Instance;\n    this.getElasticBeanstalkInstance = getElasticBeanstalkInstance;\n\n    this.hooks = {\n      \"after:deploy:deploy\": () => BbPromise.bind(this).then(() => this.init()),\n      \"before:remove:remove\": () =>\n        BbPromise.bind(this).then(() => this.remove()),\n    };\n  }\n\n  async init() {\n    const res = await this.provider.request(\n      \"CloudFormation\",\n      \"describeStacks\",\n      {\n        StackName: `${this.service.getServiceName()}-${this.provider.getStage()}`,\n      },\n      this.provider.getStage(),\n      this.provider.getRegion()\n    );\n\n    const stack = res.Stacks.pop() || { Outputs: [] };\n    const output = stack.Outputs || [];\n\n    const config = output.reduce(\n      (obj, item) => Object.assign(obj, { [item.OutputKey]: item.OutputValue }),\n      {}\n    );\n\n    if (!fs.existsSync(this.artifactTmpDir)) {\n      fs.mkdirSync(this.artifactTmpDir);\n    }\n\n    const version = Math.floor(new Date().valueOf() / 1000).toString();\n\n    this.config.forEach(async (item) => {\n      const applicationName = config[item.applicationName];\n      const environmentName = config[item.environmentName];\n      const versionLabel = `${applicationName}-${version}`;\n      const fileName = `bundle-${versionLabel}.zip`;\n\n      await zipDirectory(\n        path.join(process.cwd(), item.rootDir),\n        `${this.artifactTmpDir}/${fileName}`\n      );\n\n      const bundlePath = path.resolve(this.artifactTmpDir, fileName);\n\n      const S3 = getS3Instance(this.serverless, this.options.region);\n\n      await S3.upload({\n        Body: fs.createReadStream(bundlePath),\n        Bucket: config.ServerlessDeploymentBucketName,\n        Key: \"eb/\" + fileName,\n      }).promise();\n\n      const EB = getElasticBeanstalkInstance(\n        this.serverless,\n        this.options.region\n      );\n\n      await EB.createApplicationVersion({\n        ApplicationName: applicationName,\n        Process: true,\n        SourceBundle: {\n          S3Bucket: config.ServerlessDeploymentBucketName,\n          S3Key: \"eb/\" + fileName,\n        },\n        VersionLabel: versionLabel,\n      }).promise(),\n        this.logger.log(\"Waiting for application version...\");\n\n      let updated = false;\n\n      while (!updated) {\n        const response = await EB.describeApplicationVersions({\n          VersionLabels: [versionLabel],\n        }).promise();\n\n        this.logger.log(JSON.stringify(response));\n\n        if (response.ApplicationVersions[0].Status === \"PROCESSED\") {\n          updated = true;\n        } else if (response.ApplicationVersions[0].Status === \"FAILED\") {\n          throw new Error(\"Creating Application Version Failed\");\n        } else {\n          await BbPromise.delay(5000);\n        }\n      }\n\n      this.logger.log(\"New Application Version Created Successfully\");\n      this.logger.log(\"Updating Application Environment...\");\n\n      this.logger.log(\n        JSON.stringify(\n          await EB.updateEnvironment({\n            ApplicationName: applicationName,\n            EnvironmentName: environmentName,\n            VersionLabel: versionLabel,\n          }).promise()\n        )\n      );\n\n      this.logger.log(\"Waiting for environment...\");\n\n      updated = false;\n\n      while (!updated) {\n        const response = await EB.describeEnvironments({\n          EnvironmentNames: [environmentName],\n        }).promise();\n\n        this.logger.log(JSON.stringify(response));\n\n        if (response.Environments[0].Status === \"Ready\") {\n          updated = true;\n        } else {\n          await BbPromise.delay(5000);\n        }\n      }\n\n      this.logger.log(\"Application Environment Updated Successfully\");\n      this.logger.log(\"Application Deployed Successfully\");\n    });\n  }\n\n  async remove() {\n    const res = await this.provider.request(\n      \"CloudFormation\",\n      \"describeStacks\",\n      {\n        StackName: `${this.service.getServiceName()}-${this.provider.getStage()}`,\n      },\n      this.provider.getStage(),\n      this.provider.getRegion()\n    );\n\n    const stack = res.Stacks.pop() || { Outputs: [] };\n    const output = stack.Outputs || [];\n\n    const config = output.reduce(\n      (obj, item) => Object.assign(obj, { [item.OutputKey]: item.OutputValue }),\n      {}\n    );\n\n    const S3 = getS3Instance(this.serverless, this.options.region);\n\n    emptyS3Directory(S3, config.ServerlessDeploymentBucketName, \"eb/\");\n  }\n};\n"],"file":"index.js"}